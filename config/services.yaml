# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Controller\CurrentWeatherController:
        public: true,
        bind:
            $weatherProvider: '@OpenWeatherMapProvider'

    App\Controller\HistoricalWeatherController:
        public: true,
        bind:
            $weatherProvider: '@DatabaseProvider'

    App\Repository\WeatherRecordRepository:
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - App\Entity\WeatherRecord

    OpenWeatherMapTranslator: '@App\Service\Weather\OpenWeatherMap\OpenWeatherMapTranslator'
    OpenWeatherMapProvider: '@App\Service\Weather\OpenWeatherMap\OpenWeatherMapProvider'
    DatabaseProvider: '@App\Service\Weather\Database\DatabaseProvider'

    GuzzleHttp\Client: ~

    App\Service\Weather\OpenWeatherMap\OpenWeatherMapProvider:
        arguments:
            $apiUrl: 'https://api.openweathermap.org/data/2.5/weather'
            $apiKey: 'cdbb305c897d438d624212434ac91a07'
            $weatherTranslator: '@OpenWeatherMapTranslator'
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    weather_logger: '@Symfony\Component\HttpKernel\Log\Logger'

    Symfony\Component\HttpKernel\Log\Logger:
        arguments:
            $minLevel: "error"
            $output: '%kernel.logs_dir%/weather_api.log'

    App\EventListener\MalformedApiResponseListener:
        arguments:
            $logger: '@weather_logger'
        tags:
            - { name: 'kernel.event_listener', event: 'weather_api.malformed_response', method: 'onMalformedApiResponse' }

    App\EventListener\WeatherDataReceivedListener:
        tags:
            - { name: 'kernel.event_listener', event: 'weather_api.weather_data_received', method: 'onWeatherDataReceived' }

